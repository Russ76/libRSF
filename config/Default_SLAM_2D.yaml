---

# predefined Gaussian mixture model parameter
gmm_params: &gmm_params
    std_dev: 0.5
    components: 3
    incremental: false

gmm_prior: &gmm_prior
    dir_conc: 1.0
    nw_dof: 2.0
    nw_scale: 1e-4
    
gmm_fixed_params: &gmm_fixed_params
    tuning_type: none
    #2D GMM with 2 components
    weight: [0.333, 0.333, 0.333]
    mean: [0, 0, 0, 0, 0, 0]
    std_dev: [0.5,0,0,0.5, 5,0,0,5, 50,0,0,50]
    
em_params: &em_params
    <<: *gmm_params
    tuning_type: em
    
em_map_params: &em_map_params
    <<: *gmm_params
    <<: *gmm_prior
    tuning_type: em_map
    
vbi_params: &vbi_params
    <<: *gmm_params
    <<: *gmm_prior
    tuning_type: vbi
    
vbi_full_params: &vbi_full_params
    <<: *gmm_params
    <<: *gmm_prior
    tuning_type: vbi_full
    

# error models that can be used
errors:
  gauss: &gauss
    type: gauss
      
  dce: &dce
    type: dce
      
  cdce: &cdce
    type: cdce
      
  dcs: &dcs
    type: dcs
    parameter: 1e3
      
  sc: &sc
    type: sc
    parameter: 1e-2
      
  sm: &sm
    type: gmm
    mixture_type: sm
    <<: *gmm_fixed_params
      
  mm: &mm
    type: gmm
    mixture_type: mm
    <<: *gmm_fixed_params
    
  msm: &msm
    type: gmm
    mixture_type: msm
    tuning_type: none
    <<: *gmm_fixed_params
      
  sm_em: &sm_em
    type: gmm
    mixture_type: sm
    <<: *em_params
    
  mm_em: &mm_em
    type: gmm
    mixture_type: mm
    <<: *em_params
    
  msm_em: &msm_em
    type: gmm
    mixture_type: msm
    <<: *em_params
    
  sm_em_map: &sm_em_map
    type: gmm
    mixture_type: sm
    <<: *em_map_params
    
  mm_em_map: &mm_em_map
    type: gmm
    mixture_type: mm
    <<: *em_map_params
    
  msm_em_map: &msm_em_map
    type: gmm
    mixture_type: msm
    <<: *em_map_params
      
  sm_vbi: &sm_vbi
    type: gmm
    mixture_type: sm
    <<: *vbi_params
    
  mm_vbi: &mm_vbi
    type: gmm
    mixture_type: mm
    <<: *vbi_params
    
  msm_vbi: &msm_vbi
    type: gmm
    mixture_type: msm
    <<: *vbi_params
    
  sm_vbi_full: &sm_vbi_full
    type: gmm
    mixture_type: sm
    <<: *vbi_full_params
    
  mm_vbi_full: &mm_vbi_full
    type: gmm
    mixture_type: mm
    <<: *vbi_full_params
    
  msm_vbi_full: &msm_vbi_full
    type: gmm
    mixture_type: msm
    <<: *vbi_full_params   
    
  sm_vbi_full_inc: &sm_vbi_full_inc
    type: gmm
    mixture_type: sm
    <<: *vbi_full_params
    incremental: true
    
  mm_vbi_full_inc: &mm_vbi_full_inc
    type: gmm
    mixture_type: mm
    <<: *vbi_full_params
    incremental: true
    
  msm_vbi_full_inc: &msm_vbi_full_inc
    type: gmm
    mixture_type: msm
    <<: *vbi_full_params  
    incremental: true

# Sensors and models
factors:
    
  odom: &odom
    name: odom
    type: odom2
    error: *gauss
    
  loop: &loop
    name: loop
    type: loop2
    threshold: 0.43
    std_dev: 0.5
    error: *msm_vbi_full_inc
    
# Graph solution
solutions:

  # full batch optimization
  batch: &batch
    solver_mode: batch
    max_iterations: 500
    max_time: 60.0
    estimate_cov: true
      
  # full smoother without sliding window
  smoother: &smoother
    solver_mode: smoother
    max_iterations: 500
    max_time: 5.0
    estimate_cov: true
    
  # smoother with a "set constant" window for real time purposes
  smoother_rt: &smoother_rt
    solver_mode: smoother_rt
    max_iterations: 100
    max_time: 1.0
    window_length: 60.0
    estimate_cov: true
    
  # smoother with sliding window and marginalization
  window: &window
    solver_mode: window
    max_iterations: 500
    max_time: 5.0
    window_length: 120.0
    estimate_cov: true
    marginalize: true
    
  # kalman-filter-like estimator with marginalization
  filter: &filter
    solver_mode: filter
    max_iterations: 1
    max_time: 1.0
    estimate_cov: true
    
  # do not run the solver (for debugging)
  none: &none
    solver_mode: none
      
architecture:
  async: &async
      is_async: true
      async_rate: 1.0
      
  sync: &sync
      is_async: false
      sync_sensor: *loop
      
# concrete Configuration (only this config is used!)
config:
  solution: *batch
  factors: [*odom, *loop]
  graph: *async
